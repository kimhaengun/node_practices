1.패키지(package)
 - 완전한 애플리케이션 ex) devtools(nodedaemon, babel, webpack)
 - 코드 샘플, 프로젝트에서 사용하는 모듈(라이브러리..)
 
2.의존성(dependency)
  - 개발하고 있는 프로젝트(애플리케이션, 패키지)에서 설치하고 사용하는 다른 패키지
 
 (1)일반 의존성
    - 개발하고 있는 프로젝트에서 사용하는 패키지로 꼭 배포에 포함되야함.
    ex) 설치 방법 $ npm i ...
 (2)개발 의존성
    -개발에 필요하거나 도움이 되는 패키지 (dev tools) 배포에 포함되지 않는다.
    $ npm i -D 

3.패키지 설치 방식

 (1)전역(global) 설치
    - 여러 프로젝트에서 공통으로 사용하는 도구 설치
      $ npm i -g
 (2)지역(procject local) 설치
    - 특정 프로젝트에서만 종속적인 라이브러리들
      $ npm i
      $ npm i -D
 (3)패키지 설치(i)
    [procject-ex01] $ npm i ejs (local install, general dependency)
    [procject-ex01] $ npm i -D nodaemon (local install, develoment dependency)
    [procject-ex01] $ npm i -g gulp (-g / global install) 
 (4)패키지 삭제 (un)
    [procject-ex01] $ npm un ejs (local install 삭제)
    [procject-ex01] $ npm un -D nodaemon (local install 삭제)
    [procject-ex01] $ npm un -g gulp (global install 삭제)
        
4.Node(JavaScript) project(Client/Server Application, Package) 생성
 (1)프로젝트 디렉토리 생성 (mkdir)
 (2)프로젝트 이동 (cd)
 *필수*
 (3)[procject-ex01] $ npm init -y (프로젝트 매니패스트 파일(package.json 생성), 프로젝트 초기화)

 5.Module
 (1)코어 모듈(fs, os, ..... nnode에서 제공해주는 모듈)
 (2)파일 모듈
  - 파일경로 불러와 모듈안의 객체, 클래스, 함수를 사용한다.
 (3).npm 모듈
  - npm을 통해서 node_module에 설치하여 사용한다.
  - 로컬 배포
  - 원격 배포
